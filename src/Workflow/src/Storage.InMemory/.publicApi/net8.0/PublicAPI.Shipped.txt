#nullable enable
Bridge.Storage.InMemory.ISingletonMemoryProvider
Bridge.Storage.InMemory.MemoryPersistenceProvider
Bridge.Storage.InMemory.MemoryPersistenceProvider.ClearSubscriptionToken(string eventSubscriptionId, string token, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.MemoryPersistenceProvider.CreateEvent(Bridge.Workflow.Event newEvent, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string>
Bridge.Storage.InMemory.MemoryPersistenceProvider.CreateEventSubscription(Bridge.Workflow.EventSubscription subscription, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string>
Bridge.Storage.InMemory.MemoryPersistenceProvider.CreateNewWorkflow(Bridge.Workflow.WorkflowInstance workflow, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string>
Bridge.Storage.InMemory.MemoryPersistenceProvider.EnsureStoreExists() -> void
Bridge.Storage.InMemory.MemoryPersistenceProvider.GetEvent(string id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.Event>
Bridge.Storage.InMemory.MemoryPersistenceProvider.GetEvents(string eventName, string eventKey, System.DateTime asOf, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string>>
Bridge.Storage.InMemory.MemoryPersistenceProvider.GetFirstOpenSubscription(string eventName, string eventKey, System.DateTime asOf, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.EventSubscription>
Bridge.Storage.InMemory.MemoryPersistenceProvider.GetRunnableEvents(System.DateTime asAt, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string>>
Bridge.Storage.InMemory.MemoryPersistenceProvider.GetRunnableInstances(System.DateTime asAt, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string>>
Bridge.Storage.InMemory.MemoryPersistenceProvider.GetSubscription(string eventSubscriptionId, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.EventSubscription>
Bridge.Storage.InMemory.MemoryPersistenceProvider.GetSubscriptions(string eventName, string eventKey, System.DateTime asOf, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bridge.Workflow.EventSubscription>>
Bridge.Storage.InMemory.MemoryPersistenceProvider.GetWorkflowInstance(string Id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.WorkflowInstance>
Bridge.Storage.InMemory.MemoryPersistenceProvider.GetWorkflowInstances(Bridge.Workflow.WorkflowStatus? status, string type, System.DateTime? createdFrom, System.DateTime? createdTo, int skip, int take) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bridge.Workflow.WorkflowInstance>>
Bridge.Storage.InMemory.MemoryPersistenceProvider.GetWorkflowInstances(System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bridge.Workflow.WorkflowInstance>>
Bridge.Storage.InMemory.MemoryPersistenceProvider.MarkEventProcessed(string id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.MemoryPersistenceProvider.MarkEventUnprocessed(string id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.MemoryPersistenceProvider.MemoryPersistenceProvider() -> void
Bridge.Storage.InMemory.MemoryPersistenceProvider.PersistErrors(System.Collections.Generic.IEnumerable<Bridge.Workflow.ExecutionError> errors, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.MemoryPersistenceProvider.PersistWorkflow(Bridge.Workflow.WorkflowInstance workflow, System.Collections.Generic.List<Bridge.Workflow.EventSubscription> subscriptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.MemoryPersistenceProvider.PersistWorkflow(Bridge.Workflow.WorkflowInstance workflow, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.MemoryPersistenceProvider.ProcessCommands(System.DateTimeOffset asOf, System.Func<Bridge.Workflow.ScheduledCommand, System.Threading.Tasks.Task> action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.MemoryPersistenceProvider.ScheduleCommand(Bridge.Workflow.ScheduledCommand command) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.MemoryPersistenceProvider.SetSubscriptionToken(string eventSubscriptionId, string token, string workerId, System.DateTime expiry, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>
Bridge.Storage.InMemory.MemoryPersistenceProvider.SupportsScheduledCommands.get -> bool
Bridge.Storage.InMemory.MemoryPersistenceProvider.TerminateSubscription(string eventSubscriptionId, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.ClearSubscriptionToken(string eventSubscriptionId, string token, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.CreateEvent(Bridge.Workflow.Event newEvent, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.CreateEventSubscription(Bridge.Workflow.EventSubscription subscription, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.CreateNewWorkflow(Bridge.Workflow.WorkflowInstance workflow, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.EnsureStoreExists() -> void
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.GetEvent(string id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.Event>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.GetEvents(string eventName, string eventKey, System.DateTime asOf, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string>>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.GetFirstOpenSubscription(string eventName, string eventKey, System.DateTime asOf, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.EventSubscription>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.GetRunnableEvents(System.DateTime asAt, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string>>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.GetRunnableInstances(System.DateTime asAt, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string>>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.GetSubscription(string eventSubscriptionId, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.EventSubscription>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.GetSubscriptions(string eventName, string eventKey, System.DateTime asOf, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bridge.Workflow.EventSubscription>>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.GetWorkflowInstance(string Id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.WorkflowInstance>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.GetWorkflowInstances(Bridge.Workflow.WorkflowStatus? status, string type, System.DateTime? createdFrom, System.DateTime? createdTo, int skip, int take) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bridge.Workflow.WorkflowInstance>>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.GetWorkflowInstances(System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bridge.Workflow.WorkflowInstance>>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.MarkEventProcessed(string id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.MarkEventUnprocessed(string id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.PersistErrors(System.Collections.Generic.IEnumerable<Bridge.Workflow.ExecutionError> errors, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.PersistWorkflow(Bridge.Workflow.WorkflowInstance workflow, System.Collections.Generic.List<Bridge.Workflow.EventSubscription> subscriptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.PersistWorkflow(Bridge.Workflow.WorkflowInstance workflow, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.ProcessCommands(System.DateTimeOffset asOf, System.Func<Bridge.Workflow.ScheduledCommand, System.Threading.Tasks.Task> action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.ScheduleCommand(Bridge.Workflow.ScheduledCommand command) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.SetSubscriptionToken(string eventSubscriptionId, string token, string workerId, System.DateTime expiry, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.SupportsScheduledCommands.get -> bool
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.TerminateSubscription(string eventSubscriptionId, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Bridge.Storage.InMemory.TransientMemoryPersistenceProvider.TransientMemoryPersistenceProvider(Bridge.Storage.InMemory.ISingletonMemoryProvider innerService) -> void
Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions
static Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.UseInMemoryStorage(this Bridge.Workflow.WorkflowOptions options) -> Bridge.Workflow.WorkflowOptions