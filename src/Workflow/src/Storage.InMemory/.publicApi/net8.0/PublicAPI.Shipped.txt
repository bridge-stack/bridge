#nullable enable
Bridge.Workflow.Storage.InMemory.ISingletonMemoryProvider
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.ClearSubscriptionToken(string! eventSubscriptionId, string! token, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.CreateEvent(Bridge.Workflow.Event! newEvent, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.CreateEventSubscription(Bridge.Workflow.EventSubscription! subscription, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.CreateNewWorkflow(Bridge.Workflow.WorkflowInstance! workflow, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.EnsureStoreExists() -> void
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.GetEvent(string! id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.Event!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.GetEvents(string! eventName, string! eventKey, System.DateTime asOf, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.GetFirstOpenSubscription(string! eventName, string! eventKey, System.DateTime asOf, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.EventSubscription!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.GetRunnableEvents(System.DateTime asAt, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.GetRunnableInstances(System.DateTime asAt, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.GetSubscription(string! eventSubscriptionId, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.EventSubscription!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.GetSubscriptions(string! eventName, string! eventKey, System.DateTime asOf, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bridge.Workflow.EventSubscription!>!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.GetWorkflowInstance(string! Id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.WorkflowInstance!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.GetWorkflowInstances(Bridge.Workflow.WorkflowStatus? status, string! type, System.DateTime? createdFrom, System.DateTime? createdTo, int skip, int take) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bridge.Workflow.WorkflowInstance!>!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.GetWorkflowInstances(System.Collections.Generic.IEnumerable<string!>! ids, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bridge.Workflow.WorkflowInstance!>!>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.MarkEventProcessed(string! id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.MarkEventUnprocessed(string! id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.MemoryPersistenceProvider() -> void
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.PersistErrors(System.Collections.Generic.IEnumerable<Bridge.Workflow.ExecutionError!>! errors, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.PersistWorkflow(Bridge.Workflow.WorkflowInstance! workflow, System.Collections.Generic.List<Bridge.Workflow.EventSubscription!>! subscriptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.PersistWorkflow(Bridge.Workflow.WorkflowInstance! workflow, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.ProcessCommands(System.DateTimeOffset asOf, System.Func<Bridge.Workflow.ScheduledCommand!, System.Threading.Tasks.Task!>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.ScheduleCommand(Bridge.Workflow.ScheduledCommand! command) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.SetSubscriptionToken(string! eventSubscriptionId, string! token, string! workerId, System.DateTime expiry, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.SupportsScheduledCommands.get -> bool
Bridge.Workflow.Storage.InMemory.MemoryPersistenceProvider.TerminateSubscription(string! eventSubscriptionId, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.ClearSubscriptionToken(string! eventSubscriptionId, string! token, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.CreateEvent(Bridge.Workflow.Event! newEvent, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.CreateEventSubscription(Bridge.Workflow.EventSubscription! subscription, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.CreateNewWorkflow(Bridge.Workflow.WorkflowInstance! workflow, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.EnsureStoreExists() -> void
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.GetEvent(string! id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.Event!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.GetEvents(string! eventName, string! eventKey, System.DateTime asOf, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.GetFirstOpenSubscription(string! eventName, string! eventKey, System.DateTime asOf, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.EventSubscription!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.GetRunnableEvents(System.DateTime asAt, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.GetRunnableInstances(System.DateTime asAt, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.GetSubscription(string! eventSubscriptionId, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.EventSubscription!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.GetSubscriptions(string! eventName, string! eventKey, System.DateTime asOf, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bridge.Workflow.EventSubscription!>!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.GetWorkflowInstance(string! Id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Bridge.Workflow.WorkflowInstance!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.GetWorkflowInstances(Bridge.Workflow.WorkflowStatus? status, string! type, System.DateTime? createdFrom, System.DateTime? createdTo, int skip, int take) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bridge.Workflow.WorkflowInstance!>!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.GetWorkflowInstances(System.Collections.Generic.IEnumerable<string!>! ids, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Bridge.Workflow.WorkflowInstance!>!>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.MarkEventProcessed(string! id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.MarkEventUnprocessed(string! id, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.PersistErrors(System.Collections.Generic.IEnumerable<Bridge.Workflow.ExecutionError!>! errors, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.PersistWorkflow(Bridge.Workflow.WorkflowInstance! workflow, System.Collections.Generic.List<Bridge.Workflow.EventSubscription!>! subscriptions, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.PersistWorkflow(Bridge.Workflow.WorkflowInstance! workflow, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.ProcessCommands(System.DateTimeOffset asOf, System.Func<Bridge.Workflow.ScheduledCommand!, System.Threading.Tasks.Task!>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.ScheduleCommand(Bridge.Workflow.ScheduledCommand! command) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.SetSubscriptionToken(string! eventSubscriptionId, string! token, string! workerId, System.DateTime expiry, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.SupportsScheduledCommands.get -> bool
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.TerminateSubscription(string! eventSubscriptionId, System.Threading.CancellationToken _ = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Bridge.Workflow.Storage.InMemory.TransientMemoryPersistenceProvider.TransientMemoryPersistenceProvider(Bridge.Workflow.Storage.InMemory.ISingletonMemoryProvider! innerService) -> void